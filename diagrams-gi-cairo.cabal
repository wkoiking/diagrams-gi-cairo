Name:                diagrams-gi-cairo
Version:             1.4.1
Synopsis:            Cairo backend for diagrams drawing EDSL
Description:         A full-featured backend for rendering
                     diagrams using the cairo rendering engine.
                     .
                     This ultimately depends on a C library, via
                     Haskell's FFI, and can be difficult to install on
                     some platforms. If you are just looking for a
                     quick way to visualize diagrams, try the
                     diagrams-svg backend; if you want raster output
                     like PNG, try the diagrams-rasterific backend; if
                     you want to embed diagrams in LaTeX documents,
                     try diagrams-pgf.
                     .
                     * "Diagrams.Backend.Cairo.CmdLine" - if you're
                       just getting started with diagrams, begin here.
                     .
                     * "Diagrams.Backend.Cairo" - look at this next.
                       The general API for the cairo backend.
                     .
                     * "Diagrams.Backend.Cairo.Internal" - the
                       implementation guts of the cairo backend.
                       Users should normally not need to import this
                       module.
                     .
                     * "Diagrams.Backend.Cairo.List" - render diagrams
                       to two-dimensional lists of colors (/i.e./
                       pixels).
                     .
                     * "Diagrams.Backend.Cairo.Ptr" - render diagrams
                       to buffers in memory.
Homepage:            http://projects.haskell.org/diagrams
License:             BSD3
License-file:        LICENSE
Author:              wkoiking
Maintainer:          wanagida@gmail.com
Bug-reports:         
Category:            Graphics
Build-type:          Simple
Cabal-version:       >=1.10
Extra-source-files:  README.md

library
  exposed-modules:     Diagrams.Backend.Cairo
  hs-source-dirs:      src
  build-depends:       base,
                       mtl,
                       filepath,
                       diagrams,
                       geometry,
                       gi-cairo-render,
                       gi-cairo-connector,
                       gi-pango,
                       gi-pangocairo,
                       colour,
                       split,
                       containers,
                       lens,
                       data-default-class,
                       JuicyPixels,
                       vector,
                       array,
                       bytestring,
                       optparse-applicative,
                       transformers,
                       hashable,
                       text

  default-language:    Haskell2010
  ghc-options: -Wall

  if !os(windows)
    cpp-options: -DCMDLINELOOP
    build-depends:     unix >= 2.4 && < 2.8

test-suite test-exe
  type: exitcode-stdio-1.0
  main-is: Spec.hs
  hs-source-dirs:
      test
  default-extensions:
      StrictData
    , TupleSections
    , LambdaCase
    , MultiWayIf
    , RecordWildCards
    , DerivingStrategies
    , DeriveGeneric
    , DeriveAnyClass
    , GeneralizedNewtypeDeriving
    , BinaryLiterals
  ghc-options: -threaded -Wall 
  build-depends:       base,
                       gi-cairo-render,
                       gi-cairo-connector,
                       gi-pango,
                       gi-pangocairo,
                       gi-gobject
  default-language: Haskell2010
